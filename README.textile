h1. API

This document describes how partners will work with Engine Yard to provide services that integrate with AppCloud to Engine Yard customers.  A Ruby implementation of this API is available via: @gem install ey_services_api@ (Source code here: "https://github.com/engineyard/ey_services_api":https://github.com/engineyard/ey_services_api).

h2. Key Topics in this Document:

General API properties and specific APIs are discussed in this document.  All the APIs are JSON-based and RESTful.

General API properties:

* API Authentication

* SSO / Collaboration

* API Error Handling

Specific APIs are:

* Partner Service Registration -- The way in which Partners create and expose services to EY Customers.

* Service Enablement for User Account -- The way in which EY Customers signup for your service.

* Service Provisioning -- The way in which EY Customers provision a service for a particular use.

* User Feedback -- The way in which partners can send messages to EY Customers about their services.

* Billing -- The way in which partners are paid.

h2. Definitions

These definitions are helpful for understanding this document:

| *Partner*               | A third-party integrating one or more services with EY cloud. |
| *Service*               | Functionality provided by a Partner. |
| *Application*           | A web application and its deployment configuration on EY cloud. |
| *Environment*           | A set of one or more running servers hosting one or more running applications. |
| *Provisioned Service*   | A piece of functionality or capacity provisioned on-demand for a specific application and environment. |
| *Account*               | A single billed entity, having one or more applications running in one or more environments.  |
| *Service Account*       | A particular service as activated for a specific Account.  A parent entity to Provisioned Service. |
| *User*                  | An individual user (with unique email and login credential) having access to one or more accounts. |

h2. API Authentication

When a parter signs up, Engine Yard creates a unique authentication ID, @auth_id@, and a unique authentication key, @auth_key@. Those tokens are used to sign every API call in both directions, with HMAC.

The easiest way to sign requests is to use the "ey_api_hmac":https://github.com/engineyard/ey_api_hmac gem, and make your HTTP request with "rack-client":https://github.com/halorgium/rack-client. @EY::ApiHMAC::BaseConnection@ is a convenient wrapper for which automatically included the needed @EY::ApiHMAC::ApiAuth::Client@ middleware. (both are part of @ey_api_hmac@)

If you're using a different ruby HTTP library, the "auth-hmac":https://github.com/halorgium/auth-hmac gem should be able to help you sign requests.

h3. Implementation

Each request includes an HTTP @Authorization@ header containing it's signature. This signature, encoded with HMAC, follows the format:

bc.. Authorization: AuthHMAC {auth_id}:{signed_string}

p. Where @auth_id@ is the Partner's unique ID, and @signed_string@ is an HMAC digest of the @canonical_string@ for the current request.

The @canonical_string@ can be calculated joining the following strings with @\n@ as the separator:

# The HTTP request method (e.g. GET or POST).
# The content type, as specified by the "Content-Type" HTTP header.
# The content MD5, as specified by the "Content-MD5" HTTP header.  Or in it's absence, the MD5 hash of the request body.
# The date, as specified by the "Date" HTTP header.
# The request path, (URL without schema, host, post, or query parameters)

p. Thus, to obtain the @signed_string@, the Partner has to use her secret @auth_key@ to sign this @cannonical_string@ and generate its base64 encoded representation using sha1-hmac digest. As an example, this Ruby code would generate our @signed_string@:

bc.. [OpenSSL::HMAC.digest(OpenSSL::Digest::Digest.new('sha1'), auth_key, canonical_string)].pack('m').strip

h4. Example of a signed request

p. Given the following request:

bc.. GET /api/1/service_accounts/1324/messages HTTP/1.1
Content-Type : application/json
Accept : application/json
Date : Tue, 16 Aug 2011 20:55:55 GMT
User-agent : EY-ServicesAPI/0.0.1
Host : services.engineyard.com
Authorization : AuthHMAC ff4d04dbea52c605:o3wmVM41ihTXIHWDj6SkROBAg2g=

{"message":{"message_type":"status","subject":"Everything looks good.","body":null}}

p. The @canonical_string@ (to be HMAC digested) would be:

bc.. GET\napplication/json\ne8fa80541e3726e2cf4c71d07a7bd9fd\n2011-08-16 13:55:55 -0700\n/api/1/service_accounts/1324/messages

p. Becomes the @signed_string@:

bc.. o3wmVM41ihTXIHWDj6SkROBAg2g=

p. Which can then be compared the value provided in the @Authorization@ header of the request.

p. The method used is compatible with the auth-hmac ruby gem ("https://rubygems.org/gems/auth-hmac":https://rubygems.org/gems/auth-hmac). A simpler, rack-only implementation is provided as part of the ey_api_hmac gem ("https://github.com/engineyard/ey_api_hmac/blob/master/lib/ey_api_hmac.rb":https://github.com/engineyard/ey_api_hmac/blob/master/lib/ey_api_hmac.rb).

h2. SSO / Collaboration

Engine Yard users can be linked with multiple accounts. User memberships are distinguished as being either "collaborator" or "owner".  Services are enabled per-Account. SSO access to services happens per-User-membership.

The SSO process signs a partner-provided URL to include identifying information about the user.  The identifying parameters are:
  * @ey_user_id@       - the unique identifier for the user.
  * @ey_user_name@     - the full name of the user in plain text. Example: "John Doe".
  * @access_level@     - either "owner" or "collaborator".

What's NOT included is information about the account being accessed.  It is suggested that partners include this information somehow in the @configuration_url@ generated for each service account.

Having parsed who the user is and the account they are accessing, the Partner should be able to display something appropriate.  Some integrations may wish to ignore id and name and simply treat all access to the account as a single user.  Other deeper integrations may take advantage of this additional information for per-user customizations.

It is the responsibility of Partners to determine what makes the most sense for their integration in terms of handling multiple users per account.

The SSO signing process also add the following other parameters:
  * @ey_return_to_url@ - the url to be used when sending the user back to EY.
  * @timestamp@        - time the signature was calculated, URL should be considered invalid if timestamp is more than 5 minutes off.
  * @signature@        - HMAC digest of the full url, minus this parameter (using the API @auth_id@ and @auth_key@)

SSO signing and verification are implemented as part of the @ey_api_hmac@ gem.  To verify a url, call:

bc.. EY::ApiHMAC::SSO.authenticated?(url, auth_id, auth_key)

h3. SSO implementation

p. Users reach Partner sites by being redirected to a @configuration_url@ (at service_account or provisioned_service level) which is communicated to EY via API described below.  The @configuration_url@ is "signed" by Engine Yard to add additional parameters and make it possible to validate.  If the signature validates, the partner should assume the user is allowed to access the account or resource exposed.

The process of signing adds some parameters to the URL query string.  The value of the @signature@ parameter is base64 encoded HMAC digest of the full url, minus the signature, using the partner's API auth_key as the secret.

An example @configuration_url@ might look like:

bc..  http://partner/sso/customers/1/generators/1

p. Signed with these parameters:

bc.. {
 :timestamp=>"2011-08-16T11:48:39-07:00",
 :ey_user_id=>"1",
 :ey_user_name=>"Bob",
 :ey_return_to_url=>"http://awsm/deployments/1",
 :access_level=>"owner"
}

p. Using:

bc.. auth_id = "ff4d04dbea52c605"
auth_key = "e301bcb647fc4e9def6dfb416722c583cf3058bc1b516ebb2ac99bccf7ff5c5ea22c112cd75afd28"

p. Would become:

bc.. http://partner/sso/customers/1/generators/1?access_level=owner& \
ey_return_to_url=http%3A%2F%2Fawsm%2Fdeployments%2F1&ey_user_id=1&ey_user_name=Bob& \
timestamp=2011-08-16T11%3A48%3A39-07%3A00&signature=AuthHMAC+ff4d04dbea52c605%3A38HUpyqVWcPqeeoSAgYm4IH1cp4%3D

h4. The Process of Validation

p. Using the URL without the signature param:

bc.. http://partner/sso/customers/1/generators/1?access_level=owner& \
ey_return_to_url=http%3A%2F%2Fawsm%2Fdeployments%2F1&ey_user_id=1&ey_user_name=Bob& \
timestamp=2011-08-16T11%3A48%3A39-07%3A00

p. Calculate the signature (including @auth_id@ and @auth_key@) and compare it to the one provided:

bc.. AuthHMAC ff4d04dbea52c605:38HUpyqVWcPqeeoSAgYm4IH1cp4=

p. The HMAC digest method is the same as that used for API Authentication, except that we use the full URL instead of a @canonical_string@.

p. An example implementation of SSO is available here: "https://github.com/engineyard/ey_api_hmac/blob/master/lib/ey_api_hmac/sso.rb":https://github.com/engineyard/ey_api_hmac/blob/master/lib/ey_api_hmac/sso.rb

h2. API Error Handling

The EY API will return RESTful HTTP status codes to indicate any failures processing requests. (http://en.wikipedia.org/wiki/List_of_HTTP_status_codes)

It is assumed that the partner API will do likewise.

Error HTTP responses should have a JSON body with an "error_message".

If a 4xx series error code is returned, the request is considered to have failed and should be modified in some way before being retried.

If a 5xx series error code is returned, the caller is expected to either retry the request later, or message the failure to the requesting user to try again manually.

Examples:

bc.. 503 Service Unavailable
{
  "error_messages": ["We are doing maintenance, try again later"]
}

bc.. 422 Unprocessable Entity
{
  "error_messages": ["description cannot be blank", "name is already taken"]
}

h2. Partner Service Registration

To create a new Service:

*POST* to the @service_registration_url@ provided on partner signup

bc.. {
  "service": {
    "name":                      "Compliment service",
    "description":               "We post friendly messages to your dashboard daily.  Signup is free!"
    "vars":     [
      "COMPLIMENTS_API_KEY", 
      "DAILY_SUPPLEMENT_PATH"
    ],
    "home_url":                   "http://compliments-r-us.net",
    "terms_and_conditions_url":   "http://compliments-r-us.net/terms",
                                  // (optional: if provided, user will see a link and must check a checkbox)
    "service_accounts_url":       "http://api.compliments-r-us.net/engineyard-api/service_accounts",
                                  // RESTful URL for creating service accounts for this service in Partner system
  }
}

p. EY will respond with a service, with it's @url@ provided in the Location header:

bc.. 201 Created
Location: http://addons.engineyard.com/api/1/partners/8/services/1232

p. To update your Service configurations, you can:

*PUT* to the service's @url@

bc.. {
  "service": {
    "description":       "We post friendly messages to your dashboard daily.  Only $1/month."
  }
}

p. You may not be allowed to update certain fields once you move out of alpha.

To facilitate having a "test" or "staging" version of your service, register the service a second time with slightly different attributes.  For example, include "test" in the name and description, and point to a "staging" @service_accounts_url@.  It's OK to register multiple services with the same vars, the gating will happen at the time of public beta.

h2. Service Enablement for User Account

When a Customer goes to App Cloud Services dashboard they will be presented with a variety of services to enable.  Enabling a service will trigger an API call to setup the customer's account with the default plan for that service.  The customer may either be forced to immediately SSO into the service to configure it, or be presented with an optional link to configuration.  Partners may also use this entry point to allow the customer to upgrade/downgrade from the default plan provided.

h3. Service account creation

When a customer enables the service from the services listing page, EY will:

*POST* to the service's @service_accounts_url@

bc.. {
    "url":           "http://services.engineyard.com/api/1/partners/8/services/1232/service_accounts/333"
                     // Identifier/URL for the service account in EY systems
    "name":          "foo-corp",
                     // Name of the account in EY systems
    "messages_url":  "http://services.engineyard.com/api/1/partners/8/services/1232/service_accounts/333/messages"
                     // RESTful URL for creating messages for this service_account in Engineyard system
    "invoices_url":  "http://services.engineyard.com/api/1/partners/8/services/1232/service_accounts/333/invoices"
                     // RESTful URL for creating invoices for this service_account in Engineyard system (aka getting paid)
}

p. Partner should return a service account:

bc.. {
    "service_account": {
      "url":                      "http://api.compliments-r-us.net/engineyard-api/customers/4331"
                                   // Identifier/URL for the service account in Partner systems
      "configuration_required":    true
                                   // true or false
      "configuration_url":        "http://compliments-r-us.net/accounts/4331/configure",
                                   // if configuration_required is true, user will be redirected here after enabling the service
      "provisioned_services_url":  "http://api.compliments-r-us.net/engineyard-api/service_accounts/4331/provisioned_services",
                                   // RESTful URL for creating provisioned_services for this service_account in Partner system
    },
    "message":                  {}
                                // optional, see "User Feedback" for formatting/contents
}

h3. Partner account cancellation

When/If a customer cancels their account, Engine Yard will:

*DELETE* to the service_account's @url@

p. Partner should return:

bc.. 200 OK

p. Also upon cancellation, an invoice for usage to-date should be sent as soon as possible.

h3. Account configuration

If @configuration_required@ was true:

* Service is not yet considered active (can't be provisioned or billed)
* Customer is redirected to @configuration_url@ via SSO
* When configuration is completed:
** partner should redirect the user (or provide a link) to @ey_return_to_url@
** partner should make an API call to EY to note that config is complete

h4. Account updates API

Partner should:

*PUT* to Engine Yard's service account @url@

bc.. {
  "service_account": {
    "configuration_required":    false
                                 // false to indicate that the service can now be used
  }
}

p. EY should return:

bc.. 200 OK

h4. Post Account creation and configuration

Once @configuration_required@ is true, the services dashboard will continue to show a link to configure.

h4. Extra steps in Alpha phase:

* Login to partner account on services.engineyard.com
* Turn on the "test" of your service for an app cloud account
** Choose from a list of all accounts that you as a user are collaborating with
* Note: certain EY internal users will automatically see all "alpha" services (via a feature flag)
* Note: "alpha" charges filed with EY will never actually be billed or payed out

h2. Service Provisioning

* Customer may choose to provision services per application per environment.
* In the background, EY will make calls to all selected services.

h4. Provision API call

EY will:

*POST* to the service's @provisioned_services_url@

bc.. {
    "url":           "http://services.engineyard.com/api/1/partners/8/services/1232/service_accounts/333/provisioned_services/32"
                     // Identifier/URL for the provisioned_service in EY systems
    "messages_url":  "http://services.engineyard.com/api/1/partners/8/services/1232/service_accounts/333/provisioned_services/32/messages"
                     // RESTful URL for creating provisioned_services for this service_account in Partner system
    "environment": {
      "name":          "foo_production",
      "framework_env": "production"
      "id":            "123"
    },
    "app": {
      "name": "foo",
      "id":   "456"
    }
}

p. Partner should return a provisioned service:

bc.. {
  "provisioned_service": {
    "url":                "http://api.compliments-r-us.net/engineyard-api/service_accounts/4331/provisioned_services/23"
                          // Identifier/URL for the provisioned_service in PARTNER systems
    "configuration_url":  "http://compliments-r-us.net/accounts/4331/compliment-generator/1234",
                          // Should be a URL specific to the provisioned service
    "vars": {
      "COMPLIMENTS_API_KEY": "987698AFB0987EFBB983", 
      "DAILY_SUPPLEMENT_PATH": "/etc/"
    }
  },
  "message":            {}
                        // optional, see "User Feedback" for formatting/contents
}

p. The service MAY not immediately be available after provisioning, but it SHOULD be possible to return all the relevant configs.

h4. De-provision API call

EY will:

*DELETE* to the provisioned_service's @url@

p. Partner should return:

bc.. 200 OK

h3. Configuration on Customer Instances

The @configuration_variables@ returned from the provision call will be populated on the customer instances.

These values will be:
* Available as environment variables for customers ruby scripts and ruby applications.
* Available in the "DNA" provided to chef recipes that may need them for configuration.
* Constant until the user de-provisions.

h2. User Feedback

h3. Messages

To post a message to an account dashboard, Partner should:

*POST* to the service_account's @messages_url@

bc.. {
  "message": {
    "message_type": "notification",
    "subject":      "The Compliments Service is please to announce a new service: Insults!",
    "body":         "You mother was a...",
                    // Optional, will show as collapsed until user clicks 'read more'
  }
}

p. EY should return:

bc.. 201 Created

p. To post a message to a specific provisioned_service, Parter should:

*POST* to the provisioned_service's @messages_url@

bc.. {
  "message": {
    "message_type": "notification",
    "subject":      "That's a nice looking app deployment you've got there",
    "body":         "And a db_slave, spiffy!",
                    // Optional, will show as collapsed until user clicks 'read more'
  }
}

p. EY should return:

bc.. 201 Created

p. Messages will appear in the context of the sending service, with a link to the appropriate @configuration_url@ to SSO into the service if action is required.

@message_type@ may be either "status", "notification" or "alert".

h4. Status

Status messages replace each other.  This means that only one status message per provisioned service will be presented at a time. Or, one status message per account if sent at the account level.

Examples:
* Messaging the current monthly cost of the service as configured (account level status message).
* The service is provisioned and some configuration is recommended (via SSO).
* The service is provisioned but hasn't actively been used yet.
* The service is now configured correctly and up and running.
* Providing statistics from the service.

h4. Notification

Notifications are persistent and dismissible.  Many notifications can be presented to the user at any given time.  If a service accumulates too many un-dismissed notifications, they will appear in a roll-up with a count.

Examples:
* Letting the user know they are approaching plan limits.
* Normal service messages that could be classified as warnings.

h4. Alert

Alerts are identical to Notifications, but are also emailed to each user associated with the account.

Examples:
* Letting the user know they have exceeded plan limits.
* Normal service messages that could be classified as errors.

h2. Billing

Engine Yard bills it's customers monthly, for usage by calendar month.  A few days after the beginning of each month, the previous month's billing cycle is closed and an invoice is calculated for it.

As a partner, in order to collect for services, you are required to submit invoices to Engine Yard.  Submitted invoice will be placed in the next available (open) billing cycle, and will be billed the customer when that billing cycle closes.  Generally, invoices should be submitted for usage for the previous month shortly after the close of the month.  Submitting multiple invoices per billing cycle is allowed, but not expected to be the norm.

If a customer cancels service, an invoice for usage should be submitted within 24 hours of cancelation (preferably immediately).

To send an invoice, the Partner should:

*POST* to the service_account's @invoices_url@

bc.. {
    "invoice":
    {
      "total_amount_cents":     "3050",
                                //USD amount in cents ($30.50)
      "line_item_description":  "Invoice ID: 122. For service from Jan 1 to Feb 1 of 2012, rendered in a complimentary fashion.",
    }
}

p. EY should return:

bc.. 201 Created

p. The @total_amount_cents@ is a numeric USD value in cents (but without the "$" sign), and must be an integer greater than zero.  This is the only field actually used to invoice the customer.  This is the total amount charged to the customer, irrespective of the division of royalties to Engine Yard.

The @line_item_description@ is a breakdown of the calculation used to produce the @total_amount@, and will appear on the invoice provided to the customer.

h2. Beta process

The Beta pipeline is:

# Testing
# Private Beta
# Public Beta (optional)
# General Availability (GA)

Services can be transitioned down the pipeline through the partner dashboard.  Each transition will require manual approval by Engine Yard.

h3. Testing

* The service is _not_ visible on the service listing for the general public.
* The service is visible for any account owned by the user who created the service.
* The service can optionally be made visible to any account collaborated on by the user who created the service.

h3. Private Beta

* Service is present on services listing page, with:
** "Coming soon" tag.
** "Request access" button.
* Partners can see all customers who have requested access, and can grant access via the partner dashboard.

_Open Question_:  Do partners need the ability to converse with users requesting access?

h3. Public Beta

Identical to GA (below), but the service is tagged as "Beta" on the services screen.  This is intended to set expectations to customers as to what level of support they can expect from partners.

h3. GA

The service is visible on the service listing, and can be enabled by any customer.

h2. Example Service Integrations

Examples of how a service type might decide to approach integration.

h3. Email service

* Exposes an API key to the application via the environment variable system.
* Notify the customer when they approach their email sending limits.
* Alert the customer when they have exceeded their limits.
* Alert the customer for spam issues.
* Update the status with outbound email count.

h3. Error catching service

* Exposes an API key to the application via the environment variable system.
* Use Alerts to forward exception emails to users.

h3. Database or Search service

* Exposes an API key to the application via the environment variable system.
* Notify the user that the default "small" DB that was provisioned might need upgrading.
* Update the Status to communicate when provisioning of your new DB is not complete yet.
* Update the Status to provide DB performance statistics.
* Alert the user if the DB has had a catastrophic failure.

h3. Logging service

* Exposes syslog forwarding host/port information to Chef via the environment variable system.
* Update the Status to provide logging statistics.
* Notify the customer when they approach their email sending limits.
* Alert the customer when they have exceeded their limits.

h3. DNS and Monitoring services

* Make use of account-level configuration to setup the service.
* Notify the customer of interesting events.

